#pragma kernel CSMain

RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float4 _DirectionalLight;

float2 _PixelOffset;
float2 _PixelOffset1;
float2 _PixelOffset2;
float2 _PixelOffset3;
float2 _PixelOffset4;
float2 _PixelOffset5;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14159265f;

struct Sphere
{
	float3 position;
	float radius;
	float3 albedo;
	float3 specular;
};

StructuredBuffer<Sphere> _Spheres;


//-------------------------------------
//- RAY

struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}

Ray CreateCameraRay(float2 uv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	// Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}


//-------------------------------------
//- RAYHIT

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 albedo;
	float3 specular;
};

RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0.0f, 0.0f, 0.0f);
	hit.specular = float3(0.0f, 0.0f, 0.0f);
	return hit;
}


//-------------------------------------
//- INTERSECTION

void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = -ray.origin.y / ray.direction.y;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
		bestHit.albedo = 0.8f;
		bestHit.specular = 0.03f;
	}
}

void IntersectSphere(Ray ray, inout RayHit bestHit, uint sphereIndex)
{
	// Calculate distance along the ray where the sphere is intersected
	Sphere sphere = _Spheres[sphereIndex];
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
	if (p2sqr < 0)
		return;
	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
	if (t > 0 && t < bestHit.distance)
	{
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.position);
		bestHit.albedo = sphere.albedo;
		bestHit.specular = sphere.specular;
	}
}


//-------------------------------------
//- TRACE

RayHit Trace(Ray ray)
{
	RayHit hit = CreateRayHit();

	// Trace ground plane
	IntersectGroundPlane(ray, hit);

	// Trace spheres
	uint numSpheres, stride;
	_Spheres.GetDimensions(numSpheres, stride);
	for (uint i = 0; i < numSpheres; i++)
		IntersectSphere(ray, hit, i);
	return hit;
}


//-------------------------------------
//- SHADE

float3 Shade(inout Ray ray, RayHit hit)
{
	if (hit.distance < 1.#INF)
	{
		// Reflect the ray and multiply energy with specular reflection
		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= hit.specular;

		// Shadow test ray
		bool shadow = false;
		Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
		RayHit shadowHit = Trace(shadowRay);
		if (shadowHit.distance != 1.#INF)
		{
			return float3(0.0f, 0.0f, 0.0f);
		}

		// Return a diffuse-shaded color
		return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
	}
	else
	{
		// Erase the ray's energy - the sky doesn't reflect anything
		ray.energy = 0.0f;

		// Sample the skybox and write it
		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.8f;
	}
}


//-------------------------------------
//- KERNEL

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);

	// Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray = CreateCameraRay(uv);

	// Trace and shade the ray
	float3 result = float3(0, 0, 0);
	for (int i = 0; i < 10; i++)
	{
		RayHit hit = Trace(ray);
		result += ray.energy * Shade(ray, hit);

		if (!any(ray.energy))
			break;
	}


	float2 uv1 = float2((id.xy + _PixelOffset1) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray1 = CreateCameraRay(uv1);

	// Trace and shade the ray
	float3 result1 = float3(0, 0, 0);
	for (int i = 0; i < 10; i++)
	{
		RayHit hit = Trace(ray1);
		result1 += ray1.energy * Shade(ray1, hit);

		if (!any(ray1.energy))
			break;
	}

	float2 uv2 = float2((id.xy + _PixelOffset2) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray2 = CreateCameraRay(uv1);

	// Trace and shade the ray
	float3 result2 = float3(0, 0, 0);
	for (int i = 0; i < 10; i++)
	{
		RayHit hit = Trace(ray2);
		result2 += ray2.energy * Shade(ray2, hit);

		if (!any(ray2.energy))
			break;
	}

	float2 uv3 = float2((id.xy + _PixelOffset3) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray3 = CreateCameraRay(uv3);

	// Trace and shade the ray
	float3 result3 = float3(0, 0, 0);
	for (int i = 0; i < 10; i++)
	{
		RayHit hit = Trace(ray3);
		result3 += ray3.energy * Shade(ray3, hit);

		if (!any(ray3.energy))
			break;
	}

	float2 uv4 = float2((id.xy + _PixelOffset4) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray4 = CreateCameraRay(uv4);

	// Trace and shade the ray
	float3 result4 = float3(0, 0, 0);
	for (int i = 0; i < 10; i++)
	{
		RayHit hit = Trace(ray4);
		result4 += ray4.energy * Shade(ray4, hit);

		if (!any(ray4.energy))
			break;
	}

	float2 uv5 = float2((id.xy + _PixelOffset5) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray5 = CreateCameraRay(uv5);

	// Trace and shade the ray
	float3 result5 = float3(0, 0, 0);
	for (int i = 0; i < 10; i++)
	{
		RayHit hit = Trace(ray5);
		result5 += ray5.energy * Shade(ray5, hit);

		if (!any(ray5.energy))
			break;
	}
	result += result1 + result2 + result3 + result4 + result5;
	result = result / 6.0f;
	Result[id.xy] = float4(result, 1);
}
